from scipy.stats import chisquare

from sty import fg


def significance_testing(default_value, values, significane=0.05):
    value, p = chisquare(values)
    value = (value / p) * significane
    return [v - default_value > value for v in values]


def significance_testing_colors(default_value, values, significane=0.05):
    value, p = chisquare(values)
    value = (value / p) * significane
    maxi = max(values)
    results = []
    for v in values:
        if v == maxi:
            results.append((v, "#ff0000"))
        elif v - default_value > value:
            results.append((v, "#0033cc"))
        elif v > default_value:
            results.append((v, "#cc00cc"))
        else:
            results.append((v, "#000000"))
    return results


def significance_testing_information(baseline, values, significane=0.05):
    value, p = chisquare(values)
    value = (value / p) * significane
    maxi = max(values)
    results = []
    for v in values:
        if v == maxi:
            if baseline+value < v:
                results.append((v, 'max_sig'))
            else:
                results.append((v, 'max_non_sig'))
        elif v - baseline > value:
            results.append((v, "bigger_sig"))
        elif v > baseline:
            results.append((v, "bigger_non_sig"))
        else:
            results.append((v, "none"))
    return results, baseline + value


def significance_testing_information_dic_version(baseline, values, significane=0.05):
    value, p = chisquare(values)
    value = (value/p)*significane
    maxi = max(values)
    results = []
    for v in values:
        if v == maxi:
            if baseline + value < v:
                results.append((v, 'max_sig'))
            else:
                results.append((v, 'max_non_sig'))
        elif v - baseline > value:
            results.append((v, "bigger_sig"))
        elif v > baseline:
            results.append((v, "bigger_non_sig"))
        elif v - baseline < value:
            results.append((v, "smaller_sig"))
        elif v < baseline:
            results.append((v, "smaller_non_sig"))
        else:
            results.append((v, "none"))
    return dict(results), baseline + value


if __name__ == '__main__':
    values = [76.51515152,
              73.63636364,
              76.51515152,
              76.51515152,
              78.48484848,
              79.24242424,
              76.96969697,
              77.42424242,
              76.66666667,
              73.63636364,
              73.63636364,
              74.24242424,
              72.72727273,
              73.78787879,
              77.87878788,
              74.09090909,
              76.51515152,
              78.48484848,
              79.24242424,
              76.96969697,
              77.42424242,
              76.66666667,
              78.48484848,
              79.24242424,
              76.96969697,
              77.42424242,
              76.66666667,
              80.15151515,
              78.48484848,
              78.63636364,
              78.18181818,
              79.09090909,
              80.15151515,
              78.93939394,
              78.33333333,
              77.42424242,
              77.87878788,
              73.63636364,
              74.24242424,
              72.72727273,
              73.78787879,
              77.87878788,
              74.09090909,
              74.24242424,
              72.72727273,
              73.78787879,
              78.03030303,
              74.09090909,
              74.84848485,
              74.39393939,
              78.93939394,
              75.75757576,
              72.42424242,
              77.27272727,
              72.57575758,
              77.87878788,
              74.09090909,
              77.87878788,
              78.48484848,
              79.24242424,
              76.96969697,
              77.42424242,
              76.66666667,
              80.15151515,
              78.48484848,
              78.63636364,
              78.18181818,
              79.09090909,
              80.15151515,
              78.93939394,
              78.33333333,
              77.42424242,
              77.87878788,
              80.15151515,
              78.48484848,
              78.63636364,
              78.18181818,
              79.09090909,
              80.15151515,
              78.93939394,
              78.33333333,
              77.42424242,
              77.87878788,
              80.3030303,
              80.75757576,
              80,
              78.48484848,
              78.33333333,
              78.78787879,
              79.39393939,
              78.63636364,
              79.6969697,
              78.18181818,
              74.24242424,
              72.72727273,
              73.78787879,
              78.03030303,
              74.09090909,
              74.84848485,
              74.39393939,
              78.93939394,
              75.75757576,
              72.42424242,
              77.27272727,
              72.57575758,
              77.87878788,
              74.09090909,
              77.87878788,
              74.84848485,
              74.39393939,
              78.93939394,
              75.75757576,
              72.57575758,
              77.27272727,
              72.57575758,
              78.03030303,
              74.09090909,
              77.72727273,
              74.84848485,
              78.48484848,
              75.45454545,
              78.93939394,
              75.75757576,
              78.63636364,
              77.42424242,
              72.27272727,
              77.27272727,
              78.03030303,
              80.15151515,
              78.48484848,
              78.63636364,
              78.18181818,
              79.09090909,
              80.15151515,
              78.93939394,
              78.33333333,
              77.42424242,
              77.87878788,
              80.3030303,
              80.75757576,
              80,
              78.48484848,
              78.33333333,
              78.78787879,
              79.39393939,
              78.63636364,
              79.6969697,
              78.18181818,
              80.3030303,
              80.75757576,
              80,
              78.48484848,
              78.33333333,
              78.78787879,
              79.39393939,
              78.63636364,
              79.6969697,
              78.18181818,
              80.3030303,
              80.3030303,
              80.75757576,
              78.78787879,
              78.93939394,
              74.84848485,
              74.39393939,
              78.93939394,
              75.75757576,
              72.57575758,
              77.27272727,
              72.57575758,
              78.03030303,
              74.09090909,
              77.72727273,
              74.84848485,
              78.48484848,
              75.45454545,
              78.93939394,
              75.75757576,
              78.63636364,
              77.42424242,
              72.27272727,
              77.27272727,
              78.03030303,
              74.84848485,
              78.48484848,
              75.45454545,
              78.93939394,
              75.75757576,
              78.63636364,
              77.42424242,
              72.27272727,
              77.27272727,
              78.18181818,
              78.48484848,
              75.45454545,
              78.03030303,
              78.48484848,
              77.27272727,
              80.3030303,
              80.75757576,
              80,
              78.48484848,
              78.33333333,
              78.78787879,
              79.39393939,
              78.63636364,
              79.6969697,
              78.18181818,
              80.3030303,
              80.3030303,
              80.75757576,
              78.78787879,
              78.93939394,
              80.3030303,
              80.3030303,
              80.75757576,
              78.78787879,
              78.93939394,
              81.06060606,
              74.84848485,
              78.48484848,
              75.45454545,
              78.93939394,
              75.75757576,
              78.63636364,
              77.42424242,
              72.27272727,
              77.27272727,
              78.18181818,
              78.48484848,
              75.45454545,
              78.03030303,
              78.48484848,
              77.27272727,
              78.48484848,
              75.45454545,
              78.03030303,
              78.48484848,
              77.42424242,
              77.87878788,
              80.3030303,
              80.3030303,
              80.75757576,
              78.78787879,
              78.93939394,
              81.06060606,
              81.06060606,
              78.48484848,
              75.45454545,
              78.03030303,
              78.48484848,
              77.42424242,
              100.87878788,
              77.87878788,
              81.06060606,
              77.87878788]
    x,threshold = significance_testing_information(values[0], values)
    print("thershold ->",threshold)
    for i,info in x:
        if info == 'max':
            print(fg.red + str(i) + fg.rs)
        elif info == 'sig':
            print(fg.blue + str(i) + fg.rs)
        elif info == 'not_sig_bigger':
            print(fg.green + str(i) + fg.rs)
        else:
            print(str(i))
